---
title: "Using the ESCTreeResults API v0.5"
# subtitle: "v0.5"
execute: 
  enabled: true
title-block-banner: "#491656"
css: styles.css
---

## Outline

This notebook details how to call the ESCTreeResults API endpoint to retrieve tree species suitability metrics for a given set of environmental dose variables.

## Import required packages

::: {.panel-tabset}

## Python

```{python import_packages_py}
import requests
import json
import pandas
pandas.options.mode.chained_assignment = None
```

## R

```{r import_packages_r}
library(httr)
library(jsonlite)
library(dplyr)
```

:::

## Compose API request

Establish API POST request URL

::: {.panel-tabset}

## Python

```{python url_py}
base_url = "http://209.97.132.245:8000/ESCTreeResults/"
```

## R

```{r url_r}
base_url <- "http://209.97.132.245:8000/ESCTreeResults/"
```

:::

Set the longitude (lon) and latitude (lat) in EPSG:3857.

::: {.panel-tabset}

## Python

```{python lonlat_py}
lon = -141102.7542
lat = 6830259.9735
```

## R

```{r lonlat_r}
lon <- -141102.7542
lat <- 6830259.9735
```

:::

Establish the Soil Moisture Regime (SMR) and Soil Nutrient Regime (SNR) values.

* smr:float, any number between 0 and 8. Indicative categorical values are as follows:
    * 1 = Very Wet
    * 2 = Wet 
    * 3 = Moist
    * 4 = Moist
    * 5 = Fresh
    * 6 = Slightly Dry
    * 7 = Moderately Dry
    * 8 = Very Dry
* snr:float, any number between 0 and 6. Indicative categorical values are as follows:
    * 0 = Very Poor (VP1)
    * 0.5 = Very Poor (VP2)
    * 1 = Very Poor (VP3)
    * 1.5 = Very Poor - Poor
    * 2 = Poor
    * 3 = Medium
    * 4 = Rich
    * 5 = Very Rich
    * 6 = Carbonate

::: {.panel-tabset}

## Python

```{python soilOpts_py}
smr = 3
snr = 5
```

## R

```{r soilOpts_r}
smr <- 3
snr <- 5
```

:::

Establish the Accumulated Temperature (AT), Continentality (CT), Direct Aspect Method Scoring (DAMS) and Moisture Deficit (MD) values. 

::: {.panel-tabset}

## Python

```{python otherOpts_py}
at = 1614
ct = 10
dams = 12
md = 165
```

## R

```{r otherOpts_r}
at <- 1614
ct <- 10
dams <- 12
md <- 165
```

:::

Establish the site modifier options.

* drainage:int
    * 0 = None.
    * 1 = Drainage installed.
* brash:int
    * 0 = None (new planting).
    * 1 = Fresh brash (<18 months).
    * 2 = Brash (>18 months).
* fertiliser:int
    * 0 = None.
    * 1 = Fertiliser applied.
* exposure:int
    * 0 = None.
    * 1 = Exposed ridge/Coastal zone.
    * 2 = Local shelter/Less exposed/Underplanting.

::: {.panel-tabset}

## Python

```{python siteMod_py}
drainage = 0
brash = 0
fertiliser = 0
exposure = 0
```

## R

```{r siteMod_r}
drainage <- 0
brash <- 0
fertiliser <- 0
exposure <- 0
```

:::

Establish the ESC version.

* escVersion:str
    * "4.33" = "4.33"

::: {.panel-tabset}

## Python

```{python escV_py}
escVersion = "4.33"
```

## R

```{r escV_r}
escVersion <- "4.33"
```

:::

Compose the request body.

::: {.panel-tabset}

## Python

```{python reqBody_py}
req_body = {"lon": lon, "lat": lat, 
            "smr": smr, "snr": snr, "at": at, "ct": ct, "dams": dams, "md": md,
            "drainage": drainage, "brash": brash, "fertiliser": fertiliser, "exposure": exposure,
            "escVersion": escVersion}
```

## R

```{r reqBody_r}
req_list <- list("lon" = lon, "lat" = lat, 
                 "smr" = smr, "snr" = snr, "at" = at, "ct" = ct, "dams" = dams, "md" = md,
                 "drainage" = drainage, "brash" = brash, "fertiliser" =  fertiliser, "exposure" = exposure, 
                 "escVersion" = escVersion)

req_body <- jsonlite::toJSON(req_list, auto_unbox = TRUE)
```

:::


## Make the API call

Call the ESCWCC API

::: {.panel-tabset}

## Python

```{python apiCall_py}
ESCTreeResultsresponse = requests.post(url = base_url, json = req_body)
ESCTreeResultsresponse.status_code == 200
```

## R

```{r apiCall_r}
ESCTreeResultsresponse <- httr::POST(url = base_url, body = req_body)
ESCTreeResultsresponse$status_code == 200
```

:::

Establish a function to deserialize the json response into a nested dictionary or nested list.

::: {.panel-tabset}

## Python

```{python deserializeFunc_py}
def deserialize(responseJson:str) -> dict:
    
    loadedJson = json.loads(responseJson)

    for k,v in loadedJson.items():
        for w,s in loadedJson[k].items():
            for t,c in loadedJson[k][w].items():
                loadedJson[k][w][t] = pandas.DataFrame.from_dict(data = json.loads(c))
            
    return loadedJson
```

## R

```{r deserializeFunc_r}
deserialize <- function(responseJson){

    responseContent <- httr::content(responseJson)
    responseContent <- jsonlite::fromJSON(responseContent)

    for(i in names(responseContent)){
        for(j in names(responseContent[[i]])){
            for(k in names(responseContent[[i]][[j]])){
                responseContent[[i]][[j]][[k]] = jsonlite::fromJSON(responseContent[[i]][[j]][[k]])
            }
        }
    }
    return(responseContent)
}
```

:::

Call the `deserializeResults` function on the ESC API output.

::: {.panel-tabset}

## Python

```{python deserialize_py}
ESCTreeResultsresponse_dict = deserialize(responseJson = ESCTreeResultsresponse.json())
```

## R

```{r deserialize_r}
ESCTreeResultsresponse_list <- deserialize(responseJson = ESCTreeResultsresponse)
```

:::


## Explore results

The object produced (`ESCTreeResultsresponse_dict` or `ESCTreeResultsresponse_list`) is a nested dictionary with the following structure:

```
ESCTreeResultsresponse (dict or list)
├── Metadata (dict or list)
│   ├── ESCMetadata (dict or list)
│   │   ├── ESCTreeMetadata (DataFrame)
│   ├── APIMetadata (dict or list)
│   │   ├── DateTime (DataFrame)
└───Results (dict or list)
    ├── ESCTree (dict or list)
    │   ├── ESCDoseVals (DataFrame)
    │   ├── ESCResponseVals (DataFrame)
    │   ├── ESCSuitMetrics (DataFrame)
```

Access the ESC data frames from the API response using the following code.

The `ESCDoseVals` data frame contains the environmental dose variables obtained from the modelled data and/or manually entered, which are then modified by the aforementioned API query parameters `drainage`, `brash`, `fertiliser`, and `exposure`.
For more information on the underlying method see the [Forest Research Bulletin 124](https://www.forestresearch.gov.uk/publications/archive-an-ecological-site-classification-for-forestry-in-great-britain/) and the [Forest Research Technical Paper 20](https://www.forestresearch.gov.uk/publications/archive-an-ecological-site-classification-for-forestry-in-great-britain-with-special-reference-to-grampian-scotland/).
Column definitions:

* SMR - soil moisture regime
* SNR - soil nutrient regime
* AT - accumulated temperature
* CT - continentality
* DAMS - direct aspect method of scoring
* MD - moisture deficit
* Item - The stage of modification of the environmental dose variable values.

::: {.panel-tabset}

## Python

```{python ESCDoseVals_py}
baseline_ESCDoseVals = ESCTreeResultsresponse_dict.get("Results").get("ESCTree").get("ESCDoseVals")
baseline_ESCDoseVals
```

## R

```{r ESCDoseVals_r}
baseline_ESCDoseVals = ESCTreeResultsresponse_list$Results$ESCTree$ESCDoseVals
baseline_ESCDoseVals
```

:::

The `ESCResponseVals` data frame contains data on the response of each tree species to each environmental dose metric.
Column definitions:

* speciesCode - The Forest Research species code for the species.
* metric - The environmental dose variable (see above).
* response - The response of the tree species to the environmental dose variable. A unitless value between 0 and 1.

::: {.panel-tabset}

## Python

```{python ESCResponseVals_py}
baseline_ESCResponseVals = ESCTreeResultsresponse_dict.get("Results").get("ESCTree").get("ESCResponseVals")
baseline_ESCResponseVals.head()
```

## R

```{r ESCResponseVals_r}
baseline_ESCResponseVals = ESCTreeResultsresponse_list$Results$ESCTree$ESCResponseVals
baseline_ESCResponseVals |> head()
```

:::

The `ESCSuitMetrics` data frame contains a range of summary data relating to the suitability of each tree species based on the `ESCResponseVals` data.
Column definitions:

* speciesCode - The Forest Research species code for the species.
* speciesScientific - The scientific name of the species.
* speciesName - The common name of the species.
* maxYC - The maximum yield class of that species
* threat - Any major threats to that tree species which should be taken into account when considering planting that species.
* limFactorInclAT - The limiting factor (metric with the lowest response) including AT.
* limFactorInclATResponse - The response value for limiting factor (metric with the lowest response) including AT.
* limFactorExclAT - The limiting factor (metric with the lowest response) excluding AT.
* limFactorExclATResponse - The response value for limiting factor (metric with the lowest response) excluding AT.
* TimberSuitability - The suitability of that tree species for planting as a timber crop.
* EcologicalSuitability - The suitability of that tree species for planting.
* estimatedYC - The estimated yield class.

::: {.panel-tabset}

## Python

```{python ESCSuitMetrics_py}
baseline_ESCSuitMetrics = ESCTreeResultsresponse_dict.get("Results").get("ESCTree").get("ESCSuitMetrics")
baseline_ESCSuitMetrics.head()
```

## R

```{r ESCSuitMetrics_r}
baseline_ESCSuitMetrics = ESCTreeResultsresponse_list$Results$ESCTree$ESCSuitMetrics
baseline_ESCSuitMetrics |> head()
```

:::
